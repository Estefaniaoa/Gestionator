package es.ucm.fdi;

import es.ucm.fdi.aplicationservice.GestionPedidos;
import es.ucm.fdi.datos.*;
import es.ucm.fdi.*;
import es.ucm.fdi.integracion.DAOPedido;
import es.ucm.fdi.integracion.DAOSucursal;
import es.ucm.fdi.integracion.EstadoActual;
import es.ucm.fdi.integracion.Localizacion;
import es.ucm.fdi.integracion.MetPago;
import es.ucm.fdi.integracion.TCliente;
import es.ucm.fdi.integracion.TPControl;
import es.ucm.fdi.integracion.TPedido;
import es.ucm.fdi.integracion.TSucursal;
import es.ucm.fdi.integracion.TipoEnvio;
import es.ucm.fdi.negocio.BusinessPedido;
import es.ucm.fdi.negocio.BusinessSucursal;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class EjemploAltaPedido 
	extends TestCase
{
	//Prueba de unidad para crear un pedido
	/**
	 * Test para la correcta inserccion de datos mediante las DAO
	 * 
	 * Comprueba la creacion de una BD vacia, inserta datos comprobando su correcta inserccion
	 */
	public void testVacio()
	{
		BDMemoria<TPedido> pedido = new BDMemoria<TPedido>();
		assertTrue("La BD debía estar vacía y tiene elementos. \n", pedido.getIds().isEmpty());
	}
	
	
	//Prueba de unidad DAO
	public void testAltaPedidoDAOPedido()
	{
		BDMemoria<TPedido> pedido = new BDMemoria<TPedido>();
		DAOPedido daoPedido = new DAOPedido(pedido);
		
		
		assertTrue("La BD debía estar vacía y tiene elementos. \n", pedido.getIds().isEmpty());
		
		//inserto nuevos pedidos
		TCliente cliente1 = new TCliente("Fulgencio", "54068569U", 968515681);
		
		TPedido pedidoPrueba = new TPedido(cliente1,5, true, "Alvaro", "256877" ,MetPago.CONTRA_REEMBOLSO, new TSucursal("28", "Valencia", "Desconocida" , 26841),
				new TSucursal("28", "Madrid", "Desconocida" , 24811),TipoEnvio.URGENTE, new TPControl("Desconocido", Localizacion.SUCURSAL_INICIO ,EstadoActual.NOENVIADO),58);
		
		daoPedido.add(pedidoPrueba, "2897"); //cambiar codigo a un int
		
		assertTrue("La base de datos contiene un elemento",pedido.getIds().size()==1);

	}
	/**
	 * Test para comprobar la correcta inserccion de datos mediante los BO
	 */
	
	//Prueba de unidad BO
	public void testAltaPedidoAñadirBuissnesPedido()
	{
		BDMemoria<TPedido> pedido = new BDMemoria<TPedido>();
		DAOPedido daoPedido = new DAOPedido(pedido);
		BusinessPedido BP = new BusinessPedido(daoPedido);
		
		assertTrue("La base de datos deberia estar vacia y tiene elementos. \n"
				, pedido.getIds().isEmpty());
		
		TCliente cliente2 = new TCliente("Magdalena", "54015569Z", 968515681);
		
		TPedido pedido1 = new TPedido(cliente2, 2, true, "Random", "1111", MetPago.CONTRA_REEMBOLSO, new TSucursal("123", "Yo", "Calle Oculta", 1234),
				new TSucursal("123", "El", "Calle Torrijos", 2345), TipoEnvio.NORMAL, new TPControl("Mimente no da para mas",Localizacion.SUCURSAL_INICIO, EstadoActual.NOENVIADO ), 9);	
		
		
		BP.Añadir(pedido1, "1111");

		
		
		assertTrue("La BD debe tener al menos un elemento. \n" , pedido.getIds().size()==1);
		
		
		TPedido pedido2 = new TPedido(cliente2, 2, true, "Random", "1112", MetPago.TRASFERNCIA, new TSucursal("123", "Yo", "Calle Oculta", 1234),
				new TSucursal("123", "El", "Calle Torrijos", 2345), TipoEnvio.NORMAL, new TPControl("Me estan Robando",Localizacion.SUCURSAL_INICIO, EstadoActual.NOENVIADO), 9);
		
		DAOPedido daoPedido2 = new DAOPedido(pedido);
		
		
		//Introduzco un segundo elemento
		
		BP.Añadir(pedido2, "1112");
		
		assertTrue("La base de datos contiene mas de un elemento", pedido.getIds().size() >1);
		
		//Compruebo que el pedido introducio esta en la base de datos mesiante su codigo
		assertTrue("La base de datos contiene un pedido con codigo '1112'", pedido.find("1112")!= null);
		
	
	}

	
	public void testAltaPedidoAñadirGestionPedidos()
	{
		BDMemoria<TPedido> pedido=new BDMemoria<TPedido>();
		BDMemoria<TSucursal> sucursal = new BDMemoria<TSucursal>();
		/*TPedido pedido1 = new TPedido("Magdalena", 2, true, "Random", "1111", MetodoDePago.Contrarembolso, new TSucursal("123", "Yo", "Calle Oculta", 1234),
				new TSucursal("123", "El", "Calle Torrijos", 2345), TipoDeEnvio.Normal, new TPControl(EstadoPedido.Perdido, Localizacion.SUCURSAL_INICIO), 9);	
		*/
		DAOPedido daoPedido = new DAOPedido(pedido);
		DAOSucursal daoSucursal = new DAOSucursal(sucursal);
		BusinessPedido BP = new BusinessPedido(daoPedido);
		BusinessSucursal BS = new BusinessSucursal(daoSucursal);
		
		GestionPedidos GPedido = new GestionPedidos(BP, BS, daoPedido);
		
		TSucursal sucursal1 = new TSucursal("42", "Madrid", "Madrid", 84569); 
		TSucursal sucursal2 = new TSucursal("43", "Barcelona", "Barcelona", 84569);
		
		sucursal.insert(sucursal1, "42");
		sucursal.insert(sucursal2, "43");
		
		assertTrue("La BD de sucursales tiene dos sucursales", sucursal.getIds().size() == 2);
		
		TCliente cliente2 = new TCliente("Magdalena", "54015569Z", 968515681);
		
		TPedido pedido1 = new TPedido(cliente2, 2, true, "Random", "1111", MetPago.CONTRA_REEMBOLSO, new TSucursal("123", "Yo", "Calle Oculta", 1234),
				new TSucursal("123", "El", "Calle Torrijos", 2345), TipoEnvio.NORMAL, new TPControl("Mimente no da para mas",Localizacion.SUCURSAL_INICIO, EstadoActual.NOENVIADO ), 9);	
		TPedido pedido2 = new TPedido(cliente2, 2, true, "Random", "1112", MetPago.CONTRA_REEMBOLSO, new TSucursal("123", "Yo", "Calle Oculta", 1234),
				new TSucursal("123", "El", "Calle Torrijos", 2345), TipoEnvio.NORMAL, new TPControl("Mimente no da para mas",Localizacion.SUCURSAL_INICIO, EstadoActual.NOENVIADO ), 9);	
		TPedido pedido3 = new TPedido(cliente2, 2, true, "Random", "1113", MetPago.CONTRA_REEMBOLSO, new TSucursal("123", "Yo", "Calle Oculta", 1234),
				new TSucursal("123", "El", "Calle Torrijos", 2345), TipoEnvio.NORMAL, new TPControl("Mimente no da para mas",Localizacion.SUCURSAL_INICIO, EstadoActual.NOENVIADO ), 9);	
		
		
		GPedido.AñadirPedido(pedido2);
		
		assertTrue("La BD debe tener al menos un elemento. \n" , pedido.getIds().size()==1);
		//GPedido.AñadirPedido(pedido2);
		//GPedido.AñadirPedido(pedido3);
		
		//assertTrue("La base de datos contiene dos elementos",pedido.getIds().size()==2);
		
		//assertTrue("La base de datos contiene tres elementos",pedido.getIds().size()==3);
		
		
	
		
	}
/*
	public void testFalloAltaPedidoGestionPedidos()
	{
		BDMemoria<TPedido> pedido=new BDMemoria<TPedido>();
		BDMemoria<TSucursal> tablaSucursales = new BDMemoria<TSucursal>();
		
		assertTrue("La base de datos deberia estar vacia y tiene elementos. \n", pedido.getIds().isEmpty());
		
		DAOPedido daoPedido2 = new DAOPedido(pedido);
		BuisnessPedido BOPedido1 = new BuisnessPedido(daoPedido2);
		
		GestionPedidos GPedido = new GestionPedidos(BOPedido1);
		
		//Comprobacion mal tipoDePago
		
		GPedido.AñadirPedido("Manuela", "54015569Z",  968515681, "Alfredo", 4, "42", "43", 40,1);
		
		assertTrue("La base de datos deberia estar vacia al haber introducido un tipo de pago no valido. \n", pedido.getIds().isEmpty());
		
		//comprobacion que el emisor y receptor no deben contener numeros
		
		GPedido.AñadirPedido("2", "54015569Z",  968515681, "Alfredo", 1, "42", "43", 40,1);
		GPedido.AñadirPedido("Alfredo", "54015569Z",  968515681, "2", 1, "42", "43", 40,1);
		assertTrue("La base de datos deberia estar vacia al haber introducido mal el emisor o el receptor. \n", pedido.getIds().isEmpty());
		
		//Comprobar que el DNI sea correcto
		GPedido.AñadirPedido("Alfredo", "540155698",  968515681, "2", 1, "42", "43", 40,1);
		assertTrue("La base de datos deberia estar vacia al haber introducido mal el DNI. \n", pedido.getIds().isEmpty());
		
		
		//Comprobacion mal tipoDeEnvio
		GPedido.AñadirPedido("Manuela", "54015569Z",  968515681, "Alfredo", 1, "42", "43", 40,8);
		assertTrue("La base de datos deberia estar vacia al haber introducido un tipo de envio no valido. \n", pedido.getIds().isEmpty());
	}
	//Añadir test fallo por inpago
		*/
}
